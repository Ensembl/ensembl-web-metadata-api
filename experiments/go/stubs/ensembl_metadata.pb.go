//
// This file defines what API calls we are going to handle
// where we got our gRPC definition and what request and response
// side or server side or both.
// It's used to generate two files:
// ensembl_metadata_pb2: which has all the different requests and responses
// ensembl_metadata_pb2_grpc: which has the services that we want to implement
//   and the "stubs" that we will be using in the client side

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: ensembl_metadata.proto

package _stubs

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A genome is a collection of datasets for an assembly,
// which may or may not be in the current Ensembl release.
type Genome struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenomeUuid string    `protobuf:"bytes,1,opt,name=genome_uuid,json=genomeUuid,proto3" json:"genome_uuid,omitempty"`
	Assembly   *Assembly `protobuf:"bytes,2,opt,name=assembly,proto3" json:"assembly,omitempty"`
	Taxon      *Taxon    `protobuf:"bytes,3,opt,name=taxon,proto3" json:"taxon,omitempty"`
	Created    string    `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty"`
	Organism   *Organism `protobuf:"bytes,5,opt,name=organism,proto3" json:"organism,omitempty"`
	Release    *Release  `protobuf:"bytes,6,opt,name=release,proto3" json:"release,omitempty"`
}

func (x *Genome) Reset() {
	*x = Genome{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ensembl_metadata_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Genome) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Genome) ProtoMessage() {}

func (x *Genome) ProtoReflect() protoreflect.Message {
	mi := &file_ensembl_metadata_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Genome.ProtoReflect.Descriptor instead.
func (*Genome) Descriptor() ([]byte, []int) {
	return file_ensembl_metadata_proto_rawDescGZIP(), []int{0}
}

func (x *Genome) GetGenomeUuid() string {
	if x != nil {
		return x.GenomeUuid
	}
	return ""
}

func (x *Genome) GetAssembly() *Assembly {
	if x != nil {
		return x.Assembly
	}
	return nil
}

func (x *Genome) GetTaxon() *Taxon {
	if x != nil {
		return x.Taxon
	}
	return nil
}

func (x *Genome) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *Genome) GetOrganism() *Organism {
	if x != nil {
		return x.Organism
	}
	return nil
}

func (x *Genome) GetRelease() *Release {
	if x != nil {
		return x.Release
	}
	return nil
}

type Karyotype struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Chromosomal string `protobuf:"bytes,2,opt,name=chromosomal,proto3" json:"chromosomal,omitempty"`
	Location    string `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	GenomeUuid  string `protobuf:"bytes,4,opt,name=genome_uuid,json=genomeUuid,proto3" json:"genome_uuid,omitempty"`
}

func (x *Karyotype) Reset() {
	*x = Karyotype{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ensembl_metadata_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Karyotype) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Karyotype) ProtoMessage() {}

func (x *Karyotype) ProtoReflect() protoreflect.Message {
	mi := &file_ensembl_metadata_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Karyotype.ProtoReflect.Descriptor instead.
func (*Karyotype) Descriptor() ([]byte, []int) {
	return file_ensembl_metadata_proto_rawDescGZIP(), []int{1}
}

func (x *Karyotype) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Karyotype) GetChromosomal() string {
	if x != nil {
		return x.Chromosomal
	}
	return ""
}

func (x *Karyotype) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Karyotype) GetGenomeUuid() string {
	if x != nil {
		return x.GenomeUuid
	}
	return ""
}

type Species struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenomeUuid             string   `protobuf:"bytes,1,opt,name=genome_uuid,json=genomeUuid,proto3" json:"genome_uuid,omitempty"`
	CommonName             string   `protobuf:"bytes,2,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`
	NcbiCommonName         string   `protobuf:"bytes,4,opt,name=ncbi_common_name,json=ncbiCommonName,proto3" json:"ncbi_common_name,omitempty"`
	TaxonId                uint32   `protobuf:"varint,5,opt,name=taxon_id,json=taxonId,proto3" json:"taxon_id,omitempty"`
	ScientificName         string   `protobuf:"bytes,6,opt,name=scientific_name,json=scientificName,proto3" json:"scientific_name,omitempty"`
	AlternativeNames       []string `protobuf:"bytes,7,rep,name=alternative_names,json=alternativeNames,proto3" json:"alternative_names,omitempty"`
	ScientificParlanceName string   `protobuf:"bytes,8,opt,name=scientific_parlance_name,json=scientificParlanceName,proto3" json:"scientific_parlance_name,omitempty"`
}

func (x *Species) Reset() {
	*x = Species{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ensembl_metadata_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Species) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Species) ProtoMessage() {}

func (x *Species) ProtoReflect() protoreflect.Message {
	mi := &file_ensembl_metadata_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Species.ProtoReflect.Descriptor instead.
func (*Species) Descriptor() ([]byte, []int) {
	return file_ensembl_metadata_proto_rawDescGZIP(), []int{2}
}

func (x *Species) GetGenomeUuid() string {
	if x != nil {
		return x.GenomeUuid
	}
	return ""
}

func (x *Species) GetCommonName() string {
	if x != nil {
		return x.CommonName
	}
	return ""
}

func (x *Species) GetNcbiCommonName() string {
	if x != nil {
		return x.NcbiCommonName
	}
	return ""
}

func (x *Species) GetTaxonId() uint32 {
	if x != nil {
		return x.TaxonId
	}
	return 0
}

func (x *Species) GetScientificName() string {
	if x != nil {
		return x.ScientificName
	}
	return ""
}

func (x *Species) GetAlternativeNames() []string {
	if x != nil {
		return x.AlternativeNames
	}
	return nil
}

func (x *Species) GetScientificParlanceName() string {
	if x != nil {
		return x.ScientificParlanceName
	}
	return ""
}

type AssemblyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssemblyId       string `protobuf:"bytes,1,opt,name=assembly_id,json=assemblyId,proto3" json:"assembly_id,omitempty"`
	Accession        string `protobuf:"bytes,2,opt,name=accession,proto3" json:"accession,omitempty"`
	Level            string `protobuf:"bytes,3,opt,name=level,proto3" json:"level,omitempty"`
	Name             string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Chromosomal      uint32 `protobuf:"varint,5,opt,name=chromosomal,proto3" json:"chromosomal,omitempty"`
	Length           uint32 `protobuf:"varint,6,opt,name=length,proto3" json:"length,omitempty"`
	SequenceLocation string `protobuf:"bytes,7,opt,name=sequence_location,json=sequenceLocation,proto3" json:"sequence_location,omitempty"`
	SequenceChecksum string `protobuf:"bytes,8,opt,name=sequence_checksum,json=sequenceChecksum,proto3" json:"sequence_checksum,omitempty"`
	Ga4GhIdentifier  string `protobuf:"bytes,9,opt,name=ga4gh_identifier,json=ga4ghIdentifier,proto3" json:"ga4gh_identifier,omitempty"`
}

func (x *AssemblyInfo) Reset() {
	*x = AssemblyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ensembl_metadata_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssemblyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssemblyInfo) ProtoMessage() {}

func (x *AssemblyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ensembl_metadata_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssemblyInfo.ProtoReflect.Descriptor instead.
func (*AssemblyInfo) Descriptor() ([]byte, []int) {
	return file_ensembl_metadata_proto_rawDescGZIP(), []int{3}
}

func (x *AssemblyInfo) GetAssemblyId() string {
	if x != nil {
		return x.AssemblyId
	}
	return ""
}

func (x *AssemblyInfo) GetAccession() string {
	if x != nil {
		return x.Accession
	}
	return ""
}

func (x *AssemblyInfo) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *AssemblyInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AssemblyInfo) GetChromosomal() uint32 {
	if x != nil {
		return x.Chromosomal
	}
	return 0
}

func (x *AssemblyInfo) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *AssemblyInfo) GetSequenceLocation() string {
	if x != nil {
		return x.SequenceLocation
	}
	return ""
}

func (x *AssemblyInfo) GetSequenceChecksum() string {
	if x != nil {
		return x.SequenceChecksum
	}
	return ""
}

func (x *AssemblyInfo) GetGa4GhIdentifier() string {
	if x != nil {
		return x.Ga4GhIdentifier
	}
	return ""
}

type SubSpecies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganismId  string   `protobuf:"bytes,1,opt,name=organism_id,json=organismId,proto3" json:"organism_id,omitempty"`
	SpeciesType []string `protobuf:"bytes,2,rep,name=species_type,json=speciesType,proto3" json:"species_type,omitempty"`
	SpeciesName []string `protobuf:"bytes,3,rep,name=species_name,json=speciesName,proto3" json:"species_name,omitempty"`
}

func (x *SubSpecies) Reset() {
	*x = SubSpecies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ensembl_metadata_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubSpecies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubSpecies) ProtoMessage() {}

func (x *SubSpecies) ProtoReflect() protoreflect.Message {
	mi := &file_ensembl_metadata_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubSpecies.ProtoReflect.Descriptor instead.
func (*SubSpecies) Descriptor() ([]byte, []int) {
	return file_ensembl_metadata_proto_rawDescGZIP(), []int{4}
}

func (x *SubSpecies) GetOrganismId() string {
	if x != nil {
		return x.OrganismId
	}
	return ""
}

func (x *SubSpecies) GetSpeciesType() []string {
	if x != nil {
		return x.SpeciesType
	}
	return nil
}

func (x *SubSpecies) GetSpeciesName() []string {
	if x != nil {
		return x.SpeciesName
	}
	return nil
}

type Grouping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganismId  string   `protobuf:"bytes,1,opt,name=organism_id,json=organismId,proto3" json:"organism_id,omitempty"`
	SpeciesType []string `protobuf:"bytes,2,rep,name=species_type,json=speciesType,proto3" json:"species_type,omitempty"`
	SpeciesName []string `protobuf:"bytes,3,rep,name=species_name,json=speciesName,proto3" json:"species_name,omitempty"`
}

func (x *Grouping) Reset() {
	*x = Grouping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ensembl_metadata_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Grouping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Grouping) ProtoMessage() {}

func (x *Grouping) ProtoReflect() protoreflect.Message {
	mi := &file_ensembl_metadata_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Grouping.ProtoReflect.Descriptor instead.
func (*Grouping) Descriptor() ([]byte, []int) {
	return file_ensembl_metadata_proto_rawDescGZIP(), []int{5}
}

func (x *Grouping) GetOrganismId() string {
	if x != nil {
		return x.OrganismId
	}
	return ""
}

func (x *Grouping) GetSpeciesType() []string {
	if x != nil {
		return x.SpeciesType
	}
	return nil
}

func (x *Grouping) GetSpeciesName() []string {
	if x != nil {
		return x.SpeciesName
	}
	return nil
}

type TopLevelStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganismId string                                    `protobuf:"bytes,1,opt,name=organism_id,json=organismId,proto3" json:"organism_id,omitempty"`
	Statistics []*TopLevelStatistics_AttributeStatistics `protobuf:"bytes,2,rep,name=statistics,proto3" json:"statistics,omitempty"`
}

func (x *TopLevelStatistics) Reset() {
	*x = TopLevelStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ensembl_metadata_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopLevelStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopLevelStatistics) ProtoMessage() {}

func (x *TopLevelStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_ensembl_metadata_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopLevelStatistics.ProtoReflect.Descriptor instead.
func (*TopLevelStatistics) Descriptor() ([]byte, []int) {
	return file_ensembl_metadata_proto_rawDescGZIP(), []int{6}
}

func (x *TopLevelStatistics) GetOrganismId() string {
	if x != nil {
		return x.OrganismId
	}
	return ""
}

func (x *TopLevelStatistics) GetStatistics() []*TopLevelStatistics_AttributeStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

// An INSDC record of a genome assembly.
type Assembly struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accession   string `protobuf:"bytes,1,opt,name=accession,proto3" json:"accession,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	UcscName    string `protobuf:"bytes,3,opt,name=ucsc_name,json=ucscName,proto3" json:"ucsc_name,omitempty"`
	Level       string `protobuf:"bytes,4,opt,name=level,proto3" json:"level,omitempty"`
	EnsemblName string `protobuf:"bytes,5,opt,name=ensembl_name,json=ensemblName,proto3" json:"ensembl_name,omitempty"`
}

func (x *Assembly) Reset() {
	*x = Assembly{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ensembl_metadata_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Assembly) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Assembly) ProtoMessage() {}

func (x *Assembly) ProtoReflect() protoreflect.Message {
	mi := &file_ensembl_metadata_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Assembly.ProtoReflect.Descriptor instead.
func (*Assembly) Descriptor() ([]byte, []int) {
	return file_ensembl_metadata_proto_rawDescGZIP(), []int{7}
}

func (x *Assembly) GetAccession() string {
	if x != nil {
		return x.Accession
	}
	return ""
}

func (x *Assembly) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Assembly) GetUcscName() string {
	if x != nil {
		return x.UcscName
	}
	return ""
}

func (x *Assembly) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *Assembly) GetEnsemblName() string {
	if x != nil {
		return x.EnsemblName
	}
	return ""
}

// Taxonomic information derived from the NCBI Taxonomy.
type Taxon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaxonomyId     uint32   `protobuf:"varint,1,opt,name=taxonomy_id,json=taxonomyId,proto3" json:"taxonomy_id,omitempty"`
	ScientificName string   `protobuf:"bytes,2,opt,name=scientific_name,json=scientificName,proto3" json:"scientific_name,omitempty"`
	Strain         string   `protobuf:"bytes,3,opt,name=strain,proto3" json:"strain,omitempty"`
	CommonName     []string `protobuf:"bytes,4,rep,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`
}

func (x *Taxon) Reset() {
	*x = Taxon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ensembl_metadata_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Taxon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Taxon) ProtoMessage() {}

func (x *Taxon) ProtoReflect() protoreflect.Message {
	mi := &file_ensembl_metadata_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Taxon.ProtoReflect.Descriptor instead.
func (*Taxon) Descriptor() ([]byte, []int) {
	return file_ensembl_metadata_proto_rawDescGZIP(), []int{8}
}

func (x *Taxon) GetTaxonomyId() uint32 {
	if x != nil {
		return x.TaxonomyId
	}
	return 0
}

func (x *Taxon) GetScientificName() string {
	if x != nil {
		return x.ScientificName
	}
	return ""
}

func (x *Taxon) GetStrain() string {
	if x != nil {
		return x.Strain
	}
	return ""
}

func (x *Taxon) GetCommonName() []string {
	if x != nil {
		return x.CommonName
	}
	return nil
}

// Release details for all Ensembl sites.
type Release struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReleaseVersion float64 `protobuf:"fixed64,1,opt,name=release_version,json=releaseVersion,proto3" json:"release_version,omitempty"`
	ReleaseDate    string  `protobuf:"bytes,2,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	ReleaseLabel   string  `protobuf:"bytes,3,opt,name=release_label,json=releaseLabel,proto3" json:"release_label,omitempty"`
	IsCurrent      bool    `protobuf:"varint,4,opt,name=is_current,json=isCurrent,proto3" json:"is_current,omitempty"`
	SiteName       string  `protobuf:"bytes,5,opt,name=site_name,json=siteName,proto3" json:"site_name,omitempty"`
	SiteLabel      string  `protobuf:"bytes,6,opt,name=site_label,json=siteLabel,proto3" json:"site_label,omitempty"`
	SiteUri        string  `protobuf:"bytes,7,opt,name=site_uri,json=siteUri,proto3" json:"site_uri,omitempty"`
}

func (x *Release) Reset() {
	*x = Release{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ensembl_metadata_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Release) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Release) ProtoMessage() {}

func (x *Release) ProtoReflect() protoreflect.Message {
	mi := &file_ensembl_metadata_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Release.ProtoReflect.Descriptor instead.
func (*Release) Descriptor() ([]byte, []int) {
	return file_ensembl_metadata_proto_rawDescGZIP(), []int{9}
}

func (x *Release) GetReleaseVersion() float64 {
	if x != nil {
		return x.ReleaseVersion
	}
	return 0
}

func (x *Release) GetReleaseDate() string {
	if x != nil {
		return x.ReleaseDate
	}
	return ""
}

func (x *Release) GetReleaseLabel() string {
	if x != nil {
		return x.ReleaseLabel
	}
	return ""
}

func (x *Release) GetIsCurrent() bool {
	if x != nil {
		return x.IsCurrent
	}
	return false
}

func (x *Release) GetSiteName() string {
	if x != nil {
		return x.SiteName
	}
	return ""
}

func (x *Release) GetSiteLabel() string {
	if x != nil {
		return x.SiteLabel
	}
	return ""
}

func (x *Release) GetSiteUri() string {
	if x != nil {
		return x.SiteUri
	}
	return ""
}

type Organism struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayName            string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Strain                 string `protobuf:"bytes,2,opt,name=strain,proto3" json:"strain,omitempty"`
	ScientificName         string `protobuf:"bytes,3,opt,name=scientific_name,json=scientificName,proto3" json:"scientific_name,omitempty"`
	UrlName                string `protobuf:"bytes,4,opt,name=url_name,json=urlName,proto3" json:"url_name,omitempty"`
	EnsemblName            string `protobuf:"bytes,5,opt,name=ensembl_name,json=ensemblName,proto3" json:"ensembl_name,omitempty"`
	ScientificParlanceName string `protobuf:"bytes,6,opt,name=scientific_parlance_name,json=scientificParlanceName,proto3" json:"scientific_parlance_name,omitempty"`
}

func (x *Organism) Reset() {
	*x = Organism{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ensembl_metadata_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organism) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organism) ProtoMessage() {}

func (x *Organism) ProtoReflect() protoreflect.Message {
	mi := &file_ensembl_metadata_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organism.ProtoReflect.Descriptor instead.
func (*Organism) Descriptor() ([]byte, []int) {
	return file_ensembl_metadata_proto_rawDescGZIP(), []int{10}
}

func (x *Organism) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Organism) GetStrain() string {
	if x != nil {
		return x.Strain
	}
	return ""
}

func (x *Organism) GetScientificName() string {
	if x != nil {
		return x.ScientificName
	}
	return ""
}

func (x *Organism) GetUrlName() string {
	if x != nil {
		return x.UrlName
	}
	return ""
}

func (x *Organism) GetEnsemblName() string {
	if x != nil {
		return x.EnsemblName
	}
	return ""
}

func (x *Organism) GetScientificParlanceName() string {
	if x != nil {
		return x.ScientificParlanceName
	}
	return ""
}

// Wrapper for a list of DatasetInfo objects
type DatasetInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenomeUuid   string                      `protobuf:"bytes,1,opt,name=genome_uuid,json=genomeUuid,proto3" json:"genome_uuid,omitempty"`
	DatasetType  string                      `protobuf:"bytes,2,opt,name=dataset_type,json=datasetType,proto3" json:"dataset_type,omitempty"`
	DatasetInfos []*DatasetInfos_DatasetInfo `protobuf:"bytes,3,rep,name=dataset_infos,json=datasetInfos,proto3" json:"dataset_infos,omitempty"`
}

func (x *DatasetInfos) Reset() {
	*x = DatasetInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ensembl_metadata_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetInfos) ProtoMessage() {}

func (x *DatasetInfos) ProtoReflect() protoreflect.Message {
	mi := &file_ensembl_metadata_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetInfos.ProtoReflect.Descriptor instead.
func (*DatasetInfos) Descriptor() ([]byte, []int) {
	return file_ensembl_metadata_proto_rawDescGZIP(), []int{11}
}

func (x *DatasetInfos) GetGenomeUuid() string {
	if x != nil {
		return x.GenomeUuid
	}
	return ""
}

func (x *DatasetInfos) GetDatasetType() string {
	if x != nil {
		return x.DatasetType
	}
	return ""
}

func (x *DatasetInfos) GetDatasetInfos() []*DatasetInfos_DatasetInfo {
	if x != nil {
		return x.DatasetInfos
	}
	return nil
}

// Metadata about the sequences that comprise a genome's assembly.
type GenomeSequence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accession        string `protobuf:"bytes,1,opt,name=accession,proto3" json:"accession,omitempty"`
	Name             string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SequenceLocation string `protobuf:"bytes,3,opt,name=sequence_location,json=sequenceLocation,proto3" json:"sequence_location,omitempty"`
	Length           uint32 `protobuf:"varint,4,opt,name=length,proto3" json:"length,omitempty"`
	Chromosomal      bool   `protobuf:"varint,5,opt,name=chromosomal,proto3" json:"chromosomal,omitempty"`
}

func (x *GenomeSequence) Reset() {
	*x = GenomeSequence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ensembl_metadata_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenomeSequence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenomeSequence) ProtoMessage() {}

func (x *GenomeSequence) ProtoReflect() protoreflect.Message {
	mi := &file_ensembl_metadata_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenomeSequence.ProtoReflect.Descriptor instead.
func (*GenomeSequence) Descriptor() ([]byte, []int) {
	return file_ensembl_metadata_proto_rawDescGZIP(), []int{12}
}

func (x *GenomeSequence) GetAccession() string {
	if x != nil {
		return x.Accession
	}
	return ""
}

func (x *GenomeSequence) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GenomeSequence) GetSequenceLocation() string {
	if x != nil {
		return x.SequenceLocation
	}
	return ""
}

func (x *GenomeSequence) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *GenomeSequence) GetChromosomal() bool {
	if x != nil {
		return x.Chromosomal
	}
	return false
}

// Datasets list associated to the provided genome_uuid
type Datasets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenomeUuid string `protobuf:"bytes,1,opt,name=genome_uuid,json=genomeUuid,proto3" json:"genome_uuid,omitempty"`
	// https://stackoverflow.com/q/56401376/4488332
	// https://developers.google.com/protocol-buffers/docs/reference/python-generated#map-fields
	Datasets map[string]*DatasetInfos `protobuf:"bytes,2,rep,name=datasets,proto3" json:"datasets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Datasets) Reset() {
	*x = Datasets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ensembl_metadata_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Datasets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Datasets) ProtoMessage() {}

func (x *Datasets) ProtoReflect() protoreflect.Message {
	mi := &file_ensembl_metadata_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Datasets.ProtoReflect.Descriptor instead.
func (*Datasets) Descriptor() ([]byte, []int) {
	return file_ensembl_metadata_proto_rawDescGZIP(), []int{13}
}

func (x *Datasets) GetGenomeUuid() string {
	if x != nil {
		return x.GenomeUuid
	}
	return ""
}

func (x *Datasets) GetDatasets() map[string]*DatasetInfos {
	if x != nil {
		return x.Datasets
	}
	return nil
}

// Genome UUID filter.
// If release_version is not given, the current version is used.
type GenomeUUIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenomeUuid     string  `protobuf:"bytes,1,opt,name=genome_uuid,json=genomeUuid,proto3" json:"genome_uuid,omitempty"`               // Mandatory
	ReleaseVersion float64 `protobuf:"fixed64,2,opt,name=release_version,json=releaseVersion,proto3" json:"release_version,omitempty"` // Optional
}

func (x *GenomeUUIDRequest) Reset() {
	*x = GenomeUUIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ensembl_metadata_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenomeUUIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenomeUUIDRequest) ProtoMessage() {}

func (x *GenomeUUIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ensembl_metadata_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenomeUUIDRequest.ProtoReflect.Descriptor instead.
func (*GenomeUUIDRequest) Descriptor() ([]byte, []int) {
	return file_ensembl_metadata_proto_rawDescGZIP(), []int{14}
}

func (x *GenomeUUIDRequest) GetGenomeUuid() string {
	if x != nil {
		return x.GenomeUuid
	}
	return ""
}

func (x *GenomeUUIDRequest) GetReleaseVersion() float64 {
	if x != nil {
		return x.ReleaseVersion
	}
	return 0
}

// Genome keyword filter.
// If release_version is not given, the current version is used.
type GenomeByKeywordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword        string  `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`                                       // Mandatory
	ReleaseVersion float64 `protobuf:"fixed64,2,opt,name=release_version,json=releaseVersion,proto3" json:"release_version,omitempty"` // Optional
}

func (x *GenomeByKeywordRequest) Reset() {
	*x = GenomeByKeywordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ensembl_metadata_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenomeByKeywordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenomeByKeywordRequest) ProtoMessage() {}

func (x *GenomeByKeywordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ensembl_metadata_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenomeByKeywordRequest.ProtoReflect.Descriptor instead.
func (*GenomeByKeywordRequest) Descriptor() ([]byte, []int) {
	return file_ensembl_metadata_proto_rawDescGZIP(), []int{15}
}

func (x *GenomeByKeywordRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *GenomeByKeywordRequest) GetReleaseVersion() float64 {
	if x != nil {
		return x.ReleaseVersion
	}
	return 0
}

// Genome name filter.
// If release_version is not given, the current version is used.
type GenomeNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnsemblName    string  `protobuf:"bytes,1,opt,name=ensembl_name,json=ensemblName,proto3" json:"ensembl_name,omitempty"`            // Mandatory
	SiteName       string  `protobuf:"bytes,2,opt,name=site_name,json=siteName,proto3" json:"site_name,omitempty"`                     // Mandatory
	ReleaseVersion float64 `protobuf:"fixed64,3,opt,name=release_version,json=releaseVersion,proto3" json:"release_version,omitempty"` // Optional
}

func (x *GenomeNameRequest) Reset() {
	*x = GenomeNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ensembl_metadata_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenomeNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenomeNameRequest) ProtoMessage() {}

func (x *GenomeNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ensembl_metadata_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenomeNameRequest.ProtoReflect.Descriptor instead.
func (*GenomeNameRequest) Descriptor() ([]byte, []int) {
	return file_ensembl_metadata_proto_rawDescGZIP(), []int{16}
}

func (x *GenomeNameRequest) GetEnsemblName() string {
	if x != nil {
		return x.EnsemblName
	}
	return ""
}

func (x *GenomeNameRequest) GetSiteName() string {
	if x != nil {
		return x.SiteName
	}
	return ""
}

func (x *GenomeNameRequest) GetReleaseVersion() float64 {
	if x != nil {
		return x.ReleaseVersion
	}
	return 0
}

// Assembly ID filter
type AssemblyIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssemblyId string `protobuf:"bytes,1,opt,name=assembly_id,json=assemblyId,proto3" json:"assembly_id,omitempty"` // Mandatory
}

func (x *AssemblyIDRequest) Reset() {
	*x = AssemblyIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ensembl_metadata_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssemblyIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssemblyIDRequest) ProtoMessage() {}

func (x *AssemblyIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ensembl_metadata_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssemblyIDRequest.ProtoReflect.Descriptor instead.
func (*AssemblyIDRequest) Descriptor() ([]byte, []int) {
	return file_ensembl_metadata_proto_rawDescGZIP(), []int{17}
}

func (x *AssemblyIDRequest) GetAssemblyId() string {
	if x != nil {
		return x.AssemblyId
	}
	return ""
}

// Assembly ID filter
type AssemblyAccessionIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssemblyAccession string `protobuf:"bytes,1,opt,name=assembly_accession,json=assemblyAccession,proto3" json:"assembly_accession,omitempty"` // Mandatory
}

func (x *AssemblyAccessionIDRequest) Reset() {
	*x = AssemblyAccessionIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ensembl_metadata_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssemblyAccessionIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssemblyAccessionIDRequest) ProtoMessage() {}

func (x *AssemblyAccessionIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ensembl_metadata_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssemblyAccessionIDRequest.ProtoReflect.Descriptor instead.
func (*AssemblyAccessionIDRequest) Descriptor() ([]byte, []int) {
	return file_ensembl_metadata_proto_rawDescGZIP(), []int{18}
}

func (x *AssemblyAccessionIDRequest) GetAssemblyAccession() string {
	if x != nil {
		return x.AssemblyAccession
	}
	return ""
}

type OrganismIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganismId string `protobuf:"bytes,1,opt,name=organism_id,json=organismId,proto3" json:"organism_id,omitempty"`
}

func (x *OrganismIDRequest) Reset() {
	*x = OrganismIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ensembl_metadata_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganismIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganismIDRequest) ProtoMessage() {}

func (x *OrganismIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ensembl_metadata_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganismIDRequest.ProtoReflect.Descriptor instead.
func (*OrganismIDRequest) Descriptor() ([]byte, []int) {
	return file_ensembl_metadata_proto_rawDescGZIP(), []int{19}
}

func (x *OrganismIDRequest) GetOrganismId() string {
	if x != nil {
		return x.OrganismId
	}
	return ""
}

// Release filter.
// An empty message will return all releases, for all sites.
type ReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SiteName       []string  `protobuf:"bytes,1,rep,name=site_name,json=siteName,proto3" json:"site_name,omitempty"`                            // Optional
	ReleaseVersion []float64 `protobuf:"fixed64,2,rep,packed,name=release_version,json=releaseVersion,proto3" json:"release_version,omitempty"` // Optional
	CurrentOnly    bool      `protobuf:"varint,3,opt,name=current_only,json=currentOnly,proto3" json:"current_only,omitempty"`                  // Optional
}

func (x *ReleaseRequest) Reset() {
	*x = ReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ensembl_metadata_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseRequest) ProtoMessage() {}

func (x *ReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ensembl_metadata_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseRequest.ProtoReflect.Descriptor instead.
func (*ReleaseRequest) Descriptor() ([]byte, []int) {
	return file_ensembl_metadata_proto_rawDescGZIP(), []int{20}
}

func (x *ReleaseRequest) GetSiteName() []string {
	if x != nil {
		return x.SiteName
	}
	return nil
}

func (x *ReleaseRequest) GetReleaseVersion() []float64 {
	if x != nil {
		return x.ReleaseVersion
	}
	return nil
}

func (x *ReleaseRequest) GetCurrentOnly() bool {
	if x != nil {
		return x.CurrentOnly
	}
	return false
}

// Genome sequence filter.
type GenomeSequenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenomeUuid      string `protobuf:"bytes,1,opt,name=genome_uuid,json=genomeUuid,proto3" json:"genome_uuid,omitempty"`                 // Mandatory
	ChromosomalOnly bool   `protobuf:"varint,2,opt,name=chromosomal_only,json=chromosomalOnly,proto3" json:"chromosomal_only,omitempty"` // Optional
}

func (x *GenomeSequenceRequest) Reset() {
	*x = GenomeSequenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ensembl_metadata_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenomeSequenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenomeSequenceRequest) ProtoMessage() {}

func (x *GenomeSequenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ensembl_metadata_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenomeSequenceRequest.ProtoReflect.Descriptor instead.
func (*GenomeSequenceRequest) Descriptor() ([]byte, []int) {
	return file_ensembl_metadata_proto_rawDescGZIP(), []int{21}
}

func (x *GenomeSequenceRequest) GetGenomeUuid() string {
	if x != nil {
		return x.GenomeUuid
	}
	return ""
}

func (x *GenomeSequenceRequest) GetChromosomalOnly() bool {
	if x != nil {
		return x.ChromosomalOnly
	}
	return false
}

// Datasets filter.
type DatasetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenomeUuid     string  `protobuf:"bytes,1,opt,name=genome_uuid,json=genomeUuid,proto3" json:"genome_uuid,omitempty"`               // Mandatory
	ReleaseVersion float64 `protobuf:"fixed64,2,opt,name=release_version,json=releaseVersion,proto3" json:"release_version,omitempty"` // Optional
}

func (x *DatasetsRequest) Reset() {
	*x = DatasetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ensembl_metadata_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetsRequest) ProtoMessage() {}

func (x *DatasetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ensembl_metadata_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetsRequest.ProtoReflect.Descriptor instead.
func (*DatasetsRequest) Descriptor() ([]byte, []int) {
	return file_ensembl_metadata_proto_rawDescGZIP(), []int{22}
}

func (x *DatasetsRequest) GetGenomeUuid() string {
	if x != nil {
		return x.GenomeUuid
	}
	return ""
}

func (x *DatasetsRequest) GetReleaseVersion() float64 {
	if x != nil {
		return x.ReleaseVersion
	}
	return 0
}

// Genome datatype filter
type GenomeDatatypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenomeUuid  string `protobuf:"bytes,1,opt,name=genome_uuid,json=genomeUuid,proto3" json:"genome_uuid,omitempty"`    // Mandatory
	DatasetType string `protobuf:"bytes,2,opt,name=dataset_type,json=datasetType,proto3" json:"dataset_type,omitempty"` // Mandatory
}

func (x *GenomeDatatypeRequest) Reset() {
	*x = GenomeDatatypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ensembl_metadata_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenomeDatatypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenomeDatatypeRequest) ProtoMessage() {}

func (x *GenomeDatatypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ensembl_metadata_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenomeDatatypeRequest.ProtoReflect.Descriptor instead.
func (*GenomeDatatypeRequest) Descriptor() ([]byte, []int) {
	return file_ensembl_metadata_proto_rawDescGZIP(), []int{23}
}

func (x *GenomeDatatypeRequest) GetGenomeUuid() string {
	if x != nil {
		return x.GenomeUuid
	}
	return ""
}

func (x *GenomeDatatypeRequest) GetDatasetType() string {
	if x != nil {
		return x.DatasetType
	}
	return ""
}

type TopLevelStatistics_AttributeStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Label          string `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	StatisticType  string `protobuf:"bytes,4,opt,name=statistic_type,json=statisticType,proto3" json:"statistic_type,omitempty"`
	StatisticValue string `protobuf:"bytes,5,opt,name=statistic_value,json=statisticValue,proto3" json:"statistic_value,omitempty"`
}

func (x *TopLevelStatistics_AttributeStatistics) Reset() {
	*x = TopLevelStatistics_AttributeStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ensembl_metadata_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopLevelStatistics_AttributeStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopLevelStatistics_AttributeStatistics) ProtoMessage() {}

func (x *TopLevelStatistics_AttributeStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_ensembl_metadata_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopLevelStatistics_AttributeStatistics.ProtoReflect.Descriptor instead.
func (*TopLevelStatistics_AttributeStatistics) Descriptor() ([]byte, []int) {
	return file_ensembl_metadata_proto_rawDescGZIP(), []int{6, 0}
}

func (x *TopLevelStatistics_AttributeStatistics) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TopLevelStatistics_AttributeStatistics) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *TopLevelStatistics_AttributeStatistics) GetStatisticType() string {
	if x != nil {
		return x.StatisticType
	}
	return ""
}

func (x *TopLevelStatistics_AttributeStatistics) GetStatisticValue() string {
	if x != nil {
		return x.StatisticValue
	}
	return ""
}

// Details for datasets
type DatasetInfos_DatasetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetUuid    string  `protobuf:"bytes,1,opt,name=dataset_uuid,json=datasetUuid,proto3" json:"dataset_uuid,omitempty"`
	DatasetName    string  `protobuf:"bytes,2,opt,name=dataset_name,json=datasetName,proto3" json:"dataset_name,omitempty"`
	Name           string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Type           string  `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	DatasetVersion string  `protobuf:"bytes,5,opt,name=dataset_version,json=datasetVersion,proto3" json:"dataset_version,omitempty"`
	DatasetLabel   string  `protobuf:"bytes,6,opt,name=dataset_label,json=datasetLabel,proto3" json:"dataset_label,omitempty"`
	Version        float64 `protobuf:"fixed64,7,opt,name=version,proto3" json:"version,omitempty"`
	Value          string  `protobuf:"bytes,8,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DatasetInfos_DatasetInfo) Reset() {
	*x = DatasetInfos_DatasetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ensembl_metadata_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatasetInfos_DatasetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatasetInfos_DatasetInfo) ProtoMessage() {}

func (x *DatasetInfos_DatasetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ensembl_metadata_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatasetInfos_DatasetInfo.ProtoReflect.Descriptor instead.
func (*DatasetInfos_DatasetInfo) Descriptor() ([]byte, []int) {
	return file_ensembl_metadata_proto_rawDescGZIP(), []int{11, 0}
}

func (x *DatasetInfos_DatasetInfo) GetDatasetUuid() string {
	if x != nil {
		return x.DatasetUuid
	}
	return ""
}

func (x *DatasetInfos_DatasetInfo) GetDatasetName() string {
	if x != nil {
		return x.DatasetName
	}
	return ""
}

func (x *DatasetInfos_DatasetInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DatasetInfos_DatasetInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DatasetInfos_DatasetInfo) GetDatasetVersion() string {
	if x != nil {
		return x.DatasetVersion
	}
	return ""
}

func (x *DatasetInfos_DatasetInfo) GetDatasetLabel() string {
	if x != nil {
		return x.DatasetLabel
	}
	return ""
}

func (x *DatasetInfos_DatasetInfo) GetVersion() float64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *DatasetInfos_DatasetInfo) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_ensembl_metadata_proto protoreflect.FileDescriptor

var file_ensembl_metadata_proto_rawDesc = []byte{
	0x0a, 0x16, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62,
	0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x97, 0x02, 0x0a, 0x06, 0x47,
	0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x6f,
	0x6d, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62,
	0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x6e, 0x73, 0x65, 0x6d,
	0x62, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x6d, 0x62, 0x6c, 0x79, 0x52, 0x08, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x12, 0x2d,
	0x0a, 0x05, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x52, 0x05, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x73, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x6e, 0x73, 0x65,
	0x6d, 0x62, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x73, 0x6d, 0x52, 0x08, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12,
	0x33, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x22, 0x7e, 0x0a, 0x09, 0x4b, 0x61, 0x72, 0x79, 0x6f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x6f, 0x73,
	0x6f, 0x6d, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x6f, 0x73, 0x6f, 0x6d, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x65,
	0x55, 0x75, 0x69, 0x64, 0x22, 0xa0, 0x02, 0x0a, 0x07, 0x53, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x63, 0x62, 0x69, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x63,
	0x62, 0x69, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x61, 0x78, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x74, 0x61, 0x78, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x63, 0x69, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2b, 0x0a, 0x11, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x6c, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x38, 0x0a,
	0x18, 0x73, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x72, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x73, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x50, 0x61, 0x72, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb6, 0x02, 0x0a, 0x0c, 0x41, 0x73, 0x73, 0x65,
	0x6d, 0x62, 0x6c, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65,
	0x6d, 0x62, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x6f, 0x73, 0x6f, 0x6d, 0x61, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x6f, 0x73, 0x6f,
	0x6d, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2b, 0x0a, 0x11, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x29, 0x0a, 0x10, 0x67, 0x61, 0x34, 0x67, 0x68, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x67, 0x61, 0x34, 0x67, 0x68, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x22, 0x73, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x53, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x71, 0x0a, 0x08, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e,
	0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x65, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa1, 0x02, 0x0a, 0x12, 0x54, 0x6f, 0x70,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x49, 0x64,
	0x12, 0x58, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x6f, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x8f, 0x01, 0x0a, 0x13, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x92, 0x01, 0x0a,
	0x08, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x63, 0x73, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x63, 0x73, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x21,
	0x0a, 0x0c, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x8a, 0x01, 0x0a, 0x05, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xf0,
	0x01, 0x0a, 0x07, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69,
	0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x74, 0x65, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x74,
	0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x75,
	0x72, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x69, 0x74, 0x65, 0x55, 0x72,
	0x69, 0x22, 0xe6, 0x01, 0x0a, 0x08, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x63, 0x69,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x73, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x72, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x38, 0x0a, 0x18, 0x73, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x70,
	0x61, 0x72, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x73, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x50, 0x61,
	0x72, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9f, 0x03, 0x0a, 0x0c, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x67,
	0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x4f, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x1a, 0xf9, 0x01, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa9, 0x01, 0x0a,
	0x0e, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x6f,
	0x73, 0x6f, 0x6d, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x6f, 0x73, 0x6f, 0x6d, 0x61, 0x6c, 0x22, 0xce, 0x01, 0x0a, 0x08, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x6f,
	0x6d, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x6e, 0x73, 0x65, 0x6d,
	0x62, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x1a, 0x5b, 0x0a, 0x0d,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5d, 0x0a, 0x11, 0x47, 0x65, 0x6e,
	0x6f, 0x6d, 0x65, 0x55, 0x55, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5b, 0x0a, 0x16, 0x47, 0x65, 0x6e, 0x6f,
	0x6d, 0x65, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7c, 0x0a, 0x11, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e,
	0x73, 0x65, 0x6d, 0x62, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x34, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65,
	0x6d, 0x62, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x1a, 0x41, 0x73, 0x73,
	0x65, 0x6d, 0x62, 0x6c, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x73, 0x73, 0x65, 0x6d,
	0x62, 0x6c, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x34, 0x0a, 0x11, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x73, 0x6d, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x49, 0x64, 0x22, 0x79, 0x0a, 0x0e,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x63, 0x0a, 0x15, 0x47, 0x65, 0x6e, 0x6f, 0x6d,
	0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x6f, 0x73, 0x6f, 0x6d, 0x61, 0x6c,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x6f, 0x73, 0x6f, 0x6d, 0x61, 0x6c, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x5b, 0x0a, 0x0f,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5b, 0x0a, 0x15, 0x47, 0x65, 0x6e,
	0x6f, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x32, 0x8f, 0x0b, 0x0a, 0x0f, 0x45, 0x6e, 0x73, 0x65, 0x6d,
	0x62, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x52, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x42, 0x79, 0x55, 0x55, 0x49, 0x44, 0x12, 0x23, 0x2e,
	0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x55, 0x55, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x22, 0x00, 0x12, 0x5d,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x73, 0x42, 0x79, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x28, 0x2e, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x42,
	0x79, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x6d, 0x0a,
	0x1f, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x73, 0x42, 0x79, 0x41, 0x73, 0x73,
	0x65, 0x6d, 0x62, 0x6c, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x2c, 0x2e, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x59, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x55,
	0x55, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x65, 0x6e, 0x73,
	0x65, 0x6d, 0x62, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x65, 0x73, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x2e, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62,
	0x6c, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x53, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x65, 0x6e, 0x73, 0x65,
	0x6d, 0x62, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x75, 0x62,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6e, 0x73, 0x65, 0x6d,
	0x62, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4b, 0x61, 0x72,
	0x79, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x2e, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x55, 0x55, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4b, 0x61, 0x72, 0x79, 0x6f, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x23,
	0x2e, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x6f, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x2e, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x22, 0x00, 0x12,
	0x4d, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x20, 0x2e,
	0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x56,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x79, 0x55, 0x55,
	0x49, 0x44, 0x12, 0x23, 0x2e, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x55, 0x55, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62,
	0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x62, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6e,
	0x6f, 0x6d, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x2e, 0x65, 0x6e,
	0x73, 0x65, 0x6d, 0x62, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47,
	0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x58, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x55,
	0x55, 0x49, 0x44, 0x12, 0x21, 0x2e, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x73, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e,
	0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x00, 0x42, 0x05, 0x5a, 0x03, 0x2f, 0x67, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ensembl_metadata_proto_rawDescOnce sync.Once
	file_ensembl_metadata_proto_rawDescData = file_ensembl_metadata_proto_rawDesc
)

func file_ensembl_metadata_proto_rawDescGZIP() []byte {
	file_ensembl_metadata_proto_rawDescOnce.Do(func() {
		file_ensembl_metadata_proto_rawDescData = protoimpl.X.CompressGZIP(file_ensembl_metadata_proto_rawDescData)
	})
	return file_ensembl_metadata_proto_rawDescData
}

var file_ensembl_metadata_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_ensembl_metadata_proto_goTypes = []interface{}{
	(*Genome)(nil),                                 // 0: ensembl_metadata.Genome
	(*Karyotype)(nil),                              // 1: ensembl_metadata.Karyotype
	(*Species)(nil),                                // 2: ensembl_metadata.Species
	(*AssemblyInfo)(nil),                           // 3: ensembl_metadata.AssemblyInfo
	(*SubSpecies)(nil),                             // 4: ensembl_metadata.SubSpecies
	(*Grouping)(nil),                               // 5: ensembl_metadata.Grouping
	(*TopLevelStatistics)(nil),                     // 6: ensembl_metadata.TopLevelStatistics
	(*Assembly)(nil),                               // 7: ensembl_metadata.Assembly
	(*Taxon)(nil),                                  // 8: ensembl_metadata.Taxon
	(*Release)(nil),                                // 9: ensembl_metadata.Release
	(*Organism)(nil),                               // 10: ensembl_metadata.Organism
	(*DatasetInfos)(nil),                           // 11: ensembl_metadata.DatasetInfos
	(*GenomeSequence)(nil),                         // 12: ensembl_metadata.GenomeSequence
	(*Datasets)(nil),                               // 13: ensembl_metadata.Datasets
	(*GenomeUUIDRequest)(nil),                      // 14: ensembl_metadata.GenomeUUIDRequest
	(*GenomeByKeywordRequest)(nil),                 // 15: ensembl_metadata.GenomeByKeywordRequest
	(*GenomeNameRequest)(nil),                      // 16: ensembl_metadata.GenomeNameRequest
	(*AssemblyIDRequest)(nil),                      // 17: ensembl_metadata.AssemblyIDRequest
	(*AssemblyAccessionIDRequest)(nil),             // 18: ensembl_metadata.AssemblyAccessionIDRequest
	(*OrganismIDRequest)(nil),                      // 19: ensembl_metadata.OrganismIDRequest
	(*ReleaseRequest)(nil),                         // 20: ensembl_metadata.ReleaseRequest
	(*GenomeSequenceRequest)(nil),                  // 21: ensembl_metadata.GenomeSequenceRequest
	(*DatasetsRequest)(nil),                        // 22: ensembl_metadata.DatasetsRequest
	(*GenomeDatatypeRequest)(nil),                  // 23: ensembl_metadata.GenomeDatatypeRequest
	(*TopLevelStatistics_AttributeStatistics)(nil), // 24: ensembl_metadata.TopLevelStatistics.AttributeStatistics
	(*DatasetInfos_DatasetInfo)(nil),               // 25: ensembl_metadata.DatasetInfos.DatasetInfo
	nil,                                            // 26: ensembl_metadata.Datasets.DatasetsEntry
}
var file_ensembl_metadata_proto_depIdxs = []int32{
	7,  // 0: ensembl_metadata.Genome.assembly:type_name -> ensembl_metadata.Assembly
	8,  // 1: ensembl_metadata.Genome.taxon:type_name -> ensembl_metadata.Taxon
	10, // 2: ensembl_metadata.Genome.organism:type_name -> ensembl_metadata.Organism
	9,  // 3: ensembl_metadata.Genome.release:type_name -> ensembl_metadata.Release
	24, // 4: ensembl_metadata.TopLevelStatistics.statistics:type_name -> ensembl_metadata.TopLevelStatistics.AttributeStatistics
	25, // 5: ensembl_metadata.DatasetInfos.dataset_infos:type_name -> ensembl_metadata.DatasetInfos.DatasetInfo
	26, // 6: ensembl_metadata.Datasets.datasets:type_name -> ensembl_metadata.Datasets.DatasetsEntry
	11, // 7: ensembl_metadata.Datasets.DatasetsEntry.value:type_name -> ensembl_metadata.DatasetInfos
	14, // 8: ensembl_metadata.EnsemblMetadata.GetGenomeByUUID:input_type -> ensembl_metadata.GenomeUUIDRequest
	15, // 9: ensembl_metadata.EnsemblMetadata.GetGenomesByKeyword:input_type -> ensembl_metadata.GenomeByKeywordRequest
	18, // 10: ensembl_metadata.EnsemblMetadata.GetGenomesByAssemblyAccessionID:input_type -> ensembl_metadata.AssemblyAccessionIDRequest
	14, // 11: ensembl_metadata.EnsemblMetadata.GetSpeciesInformation:input_type -> ensembl_metadata.GenomeUUIDRequest
	17, // 12: ensembl_metadata.EnsemblMetadata.GetAssemblyInformation:input_type -> ensembl_metadata.AssemblyIDRequest
	19, // 13: ensembl_metadata.EnsemblMetadata.GetSubSpeciesInformation:input_type -> ensembl_metadata.OrganismIDRequest
	19, // 14: ensembl_metadata.EnsemblMetadata.GetGroupingInformation:input_type -> ensembl_metadata.OrganismIDRequest
	14, // 15: ensembl_metadata.EnsemblMetadata.GetKaryotypeInformation:input_type -> ensembl_metadata.GenomeUUIDRequest
	19, // 16: ensembl_metadata.EnsemblMetadata.GetTopLevelStatistics:input_type -> ensembl_metadata.OrganismIDRequest
	16, // 17: ensembl_metadata.EnsemblMetadata.GetGenomeByName:input_type -> ensembl_metadata.GenomeNameRequest
	20, // 18: ensembl_metadata.EnsemblMetadata.GetRelease:input_type -> ensembl_metadata.ReleaseRequest
	14, // 19: ensembl_metadata.EnsemblMetadata.GetReleaseByUUID:input_type -> ensembl_metadata.GenomeUUIDRequest
	21, // 20: ensembl_metadata.EnsemblMetadata.GetGenomeSequence:input_type -> ensembl_metadata.GenomeSequenceRequest
	22, // 21: ensembl_metadata.EnsemblMetadata.GetDatasetsListByUUID:input_type -> ensembl_metadata.DatasetsRequest
	23, // 22: ensembl_metadata.EnsemblMetadata.GetDatasetInformation:input_type -> ensembl_metadata.GenomeDatatypeRequest
	0,  // 23: ensembl_metadata.EnsemblMetadata.GetGenomeByUUID:output_type -> ensembl_metadata.Genome
	0,  // 24: ensembl_metadata.EnsemblMetadata.GetGenomesByKeyword:output_type -> ensembl_metadata.Genome
	0,  // 25: ensembl_metadata.EnsemblMetadata.GetGenomesByAssemblyAccessionID:output_type -> ensembl_metadata.Genome
	2,  // 26: ensembl_metadata.EnsemblMetadata.GetSpeciesInformation:output_type -> ensembl_metadata.Species
	3,  // 27: ensembl_metadata.EnsemblMetadata.GetAssemblyInformation:output_type -> ensembl_metadata.AssemblyInfo
	4,  // 28: ensembl_metadata.EnsemblMetadata.GetSubSpeciesInformation:output_type -> ensembl_metadata.SubSpecies
	5,  // 29: ensembl_metadata.EnsemblMetadata.GetGroupingInformation:output_type -> ensembl_metadata.Grouping
	1,  // 30: ensembl_metadata.EnsemblMetadata.GetKaryotypeInformation:output_type -> ensembl_metadata.Karyotype
	6,  // 31: ensembl_metadata.EnsemblMetadata.GetTopLevelStatistics:output_type -> ensembl_metadata.TopLevelStatistics
	0,  // 32: ensembl_metadata.EnsemblMetadata.GetGenomeByName:output_type -> ensembl_metadata.Genome
	9,  // 33: ensembl_metadata.EnsemblMetadata.GetRelease:output_type -> ensembl_metadata.Release
	9,  // 34: ensembl_metadata.EnsemblMetadata.GetReleaseByUUID:output_type -> ensembl_metadata.Release
	12, // 35: ensembl_metadata.EnsemblMetadata.GetGenomeSequence:output_type -> ensembl_metadata.GenomeSequence
	13, // 36: ensembl_metadata.EnsemblMetadata.GetDatasetsListByUUID:output_type -> ensembl_metadata.Datasets
	11, // 37: ensembl_metadata.EnsemblMetadata.GetDatasetInformation:output_type -> ensembl_metadata.DatasetInfos
	23, // [23:38] is the sub-list for method output_type
	8,  // [8:23] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_ensembl_metadata_proto_init() }
func file_ensembl_metadata_proto_init() {
	if File_ensembl_metadata_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ensembl_metadata_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Genome); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ensembl_metadata_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Karyotype); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ensembl_metadata_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Species); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ensembl_metadata_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssemblyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ensembl_metadata_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubSpecies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ensembl_metadata_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Grouping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ensembl_metadata_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopLevelStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ensembl_metadata_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Assembly); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ensembl_metadata_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Taxon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ensembl_metadata_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Release); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ensembl_metadata_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organism); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ensembl_metadata_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ensembl_metadata_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenomeSequence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ensembl_metadata_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Datasets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ensembl_metadata_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenomeUUIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ensembl_metadata_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenomeByKeywordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ensembl_metadata_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenomeNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ensembl_metadata_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssemblyIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ensembl_metadata_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssemblyAccessionIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ensembl_metadata_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganismIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ensembl_metadata_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ensembl_metadata_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenomeSequenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ensembl_metadata_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ensembl_metadata_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenomeDatatypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ensembl_metadata_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopLevelStatistics_AttributeStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ensembl_metadata_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatasetInfos_DatasetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ensembl_metadata_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ensembl_metadata_proto_goTypes,
		DependencyIndexes: file_ensembl_metadata_proto_depIdxs,
		MessageInfos:      file_ensembl_metadata_proto_msgTypes,
	}.Build()
	File_ensembl_metadata_proto = out.File
	file_ensembl_metadata_proto_rawDesc = nil
	file_ensembl_metadata_proto_goTypes = nil
	file_ensembl_metadata_proto_depIdxs = nil
}
