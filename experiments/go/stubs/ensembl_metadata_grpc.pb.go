//
// This file defines what API calls we are going to handle
// where we got our gRPC definition and what request and response
// side or server side or both.
// It's used to generate two files:
// ensembl_metadata_pb2: which has all the different requests and responses
// ensembl_metadata_pb2_grpc: which has the services that we want to implement
//   and the "stubs" that we will be using in the client side

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: ensembl_metadata.proto

package _stubs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EnsemblMetadata_GetGenomeByUUID_FullMethodName                 = "/ensembl_metadata.EnsemblMetadata/GetGenomeByUUID"
	EnsemblMetadata_GetGenomesByKeyword_FullMethodName             = "/ensembl_metadata.EnsemblMetadata/GetGenomesByKeyword"
	EnsemblMetadata_GetGenomesByAssemblyAccessionID_FullMethodName = "/ensembl_metadata.EnsemblMetadata/GetGenomesByAssemblyAccessionID"
	EnsemblMetadata_GetSpeciesInformation_FullMethodName           = "/ensembl_metadata.EnsemblMetadata/GetSpeciesInformation"
	EnsemblMetadata_GetAssemblyInformation_FullMethodName          = "/ensembl_metadata.EnsemblMetadata/GetAssemblyInformation"
	EnsemblMetadata_GetSubSpeciesInformation_FullMethodName        = "/ensembl_metadata.EnsemblMetadata/GetSubSpeciesInformation"
	EnsemblMetadata_GetGroupingInformation_FullMethodName          = "/ensembl_metadata.EnsemblMetadata/GetGroupingInformation"
	EnsemblMetadata_GetKaryotypeInformation_FullMethodName         = "/ensembl_metadata.EnsemblMetadata/GetKaryotypeInformation"
	EnsemblMetadata_GetTopLevelStatistics_FullMethodName           = "/ensembl_metadata.EnsemblMetadata/GetTopLevelStatistics"
	EnsemblMetadata_GetGenomeByName_FullMethodName                 = "/ensembl_metadata.EnsemblMetadata/GetGenomeByName"
	EnsemblMetadata_GetRelease_FullMethodName                      = "/ensembl_metadata.EnsemblMetadata/GetRelease"
	EnsemblMetadata_GetReleaseByUUID_FullMethodName                = "/ensembl_metadata.EnsemblMetadata/GetReleaseByUUID"
	EnsemblMetadata_GetGenomeSequence_FullMethodName               = "/ensembl_metadata.EnsemblMetadata/GetGenomeSequence"
	EnsemblMetadata_GetDatasetsListByUUID_FullMethodName           = "/ensembl_metadata.EnsemblMetadata/GetDatasetsListByUUID"
	EnsemblMetadata_GetDatasetInformation_FullMethodName           = "/ensembl_metadata.EnsemblMetadata/GetDatasetInformation"
)

// EnsemblMetadataClient is the client API for EnsemblMetadata service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnsemblMetadataClient interface {
	// Retrieve genome by its UUID.
	GetGenomeByUUID(ctx context.Context, in *GenomeUUIDRequest, opts ...grpc.CallOption) (*Genome, error)
	// Retrieve genomes by keyword search
	GetGenomesByKeyword(ctx context.Context, in *GenomeByKeywordRequest, opts ...grpc.CallOption) (EnsemblMetadata_GetGenomesByKeywordClient, error)
	// Retrieve all genomes for a give assembly accession ID
	GetGenomesByAssemblyAccessionID(ctx context.Context, in *AssemblyAccessionIDRequest, opts ...grpc.CallOption) (EnsemblMetadata_GetGenomesByAssemblyAccessionIDClient, error)
	// Get species information for a genome UUID
	GetSpeciesInformation(ctx context.Context, in *GenomeUUIDRequest, opts ...grpc.CallOption) (*Species, error)
	// Get assembly information
	GetAssemblyInformation(ctx context.Context, in *AssemblyIDRequest, opts ...grpc.CallOption) (*AssemblyInfo, error)
	// Get subspecies information
	GetSubSpeciesInformation(ctx context.Context, in *OrganismIDRequest, opts ...grpc.CallOption) (*SubSpecies, error)
	// Get grouping information
	GetGroupingInformation(ctx context.Context, in *OrganismIDRequest, opts ...grpc.CallOption) (*Grouping, error)
	// Get karyotype information
	GetKaryotypeInformation(ctx context.Context, in *GenomeUUIDRequest, opts ...grpc.CallOption) (*Karyotype, error)
	// Get top level statistics
	GetTopLevelStatistics(ctx context.Context, in *OrganismIDRequest, opts ...grpc.CallOption) (*TopLevelStatistics, error)
	// Retrieve genome by Ensembl name and site, and optionally release.
	GetGenomeByName(ctx context.Context, in *GenomeNameRequest, opts ...grpc.CallOption) (*Genome, error)
	// Retrieve release details.
	GetRelease(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (EnsemblMetadata_GetReleaseClient, error)
	// Retrieve release details for a genome.
	GetReleaseByUUID(ctx context.Context, in *GenomeUUIDRequest, opts ...grpc.CallOption) (EnsemblMetadata_GetReleaseByUUIDClient, error)
	// Retrieve sequence metadata for a genome's assembly.
	GetGenomeSequence(ctx context.Context, in *GenomeSequenceRequest, opts ...grpc.CallOption) (EnsemblMetadata_GetGenomeSequenceClient, error)
	// Retrieve a list of dataset_ids associated with a genome UUID.
	GetDatasetsListByUUID(ctx context.Context, in *DatasetsRequest, opts ...grpc.CallOption) (*Datasets, error)
	// Retrieve dataset info by genome uuid and dataset_type
	GetDatasetInformation(ctx context.Context, in *GenomeDatatypeRequest, opts ...grpc.CallOption) (*DatasetInfos, error)
}

type ensemblMetadataClient struct {
	cc grpc.ClientConnInterface
}

func NewEnsemblMetadataClient(cc grpc.ClientConnInterface) EnsemblMetadataClient {
	return &ensemblMetadataClient{cc}
}

func (c *ensemblMetadataClient) GetGenomeByUUID(ctx context.Context, in *GenomeUUIDRequest, opts ...grpc.CallOption) (*Genome, error) {
	out := new(Genome)
	err := c.cc.Invoke(ctx, EnsemblMetadata_GetGenomeByUUID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ensemblMetadataClient) GetGenomesByKeyword(ctx context.Context, in *GenomeByKeywordRequest, opts ...grpc.CallOption) (EnsemblMetadata_GetGenomesByKeywordClient, error) {
	stream, err := c.cc.NewStream(ctx, &EnsemblMetadata_ServiceDesc.Streams[0], EnsemblMetadata_GetGenomesByKeyword_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &ensemblMetadataGetGenomesByKeywordClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EnsemblMetadata_GetGenomesByKeywordClient interface {
	Recv() (*Genome, error)
	grpc.ClientStream
}

type ensemblMetadataGetGenomesByKeywordClient struct {
	grpc.ClientStream
}

func (x *ensemblMetadataGetGenomesByKeywordClient) Recv() (*Genome, error) {
	m := new(Genome)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ensemblMetadataClient) GetGenomesByAssemblyAccessionID(ctx context.Context, in *AssemblyAccessionIDRequest, opts ...grpc.CallOption) (EnsemblMetadata_GetGenomesByAssemblyAccessionIDClient, error) {
	stream, err := c.cc.NewStream(ctx, &EnsemblMetadata_ServiceDesc.Streams[1], EnsemblMetadata_GetGenomesByAssemblyAccessionID_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &ensemblMetadataGetGenomesByAssemblyAccessionIDClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EnsemblMetadata_GetGenomesByAssemblyAccessionIDClient interface {
	Recv() (*Genome, error)
	grpc.ClientStream
}

type ensemblMetadataGetGenomesByAssemblyAccessionIDClient struct {
	grpc.ClientStream
}

func (x *ensemblMetadataGetGenomesByAssemblyAccessionIDClient) Recv() (*Genome, error) {
	m := new(Genome)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ensemblMetadataClient) GetSpeciesInformation(ctx context.Context, in *GenomeUUIDRequest, opts ...grpc.CallOption) (*Species, error) {
	out := new(Species)
	err := c.cc.Invoke(ctx, EnsemblMetadata_GetSpeciesInformation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ensemblMetadataClient) GetAssemblyInformation(ctx context.Context, in *AssemblyIDRequest, opts ...grpc.CallOption) (*AssemblyInfo, error) {
	out := new(AssemblyInfo)
	err := c.cc.Invoke(ctx, EnsemblMetadata_GetAssemblyInformation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ensemblMetadataClient) GetSubSpeciesInformation(ctx context.Context, in *OrganismIDRequest, opts ...grpc.CallOption) (*SubSpecies, error) {
	out := new(SubSpecies)
	err := c.cc.Invoke(ctx, EnsemblMetadata_GetSubSpeciesInformation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ensemblMetadataClient) GetGroupingInformation(ctx context.Context, in *OrganismIDRequest, opts ...grpc.CallOption) (*Grouping, error) {
	out := new(Grouping)
	err := c.cc.Invoke(ctx, EnsemblMetadata_GetGroupingInformation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ensemblMetadataClient) GetKaryotypeInformation(ctx context.Context, in *GenomeUUIDRequest, opts ...grpc.CallOption) (*Karyotype, error) {
	out := new(Karyotype)
	err := c.cc.Invoke(ctx, EnsemblMetadata_GetKaryotypeInformation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ensemblMetadataClient) GetTopLevelStatistics(ctx context.Context, in *OrganismIDRequest, opts ...grpc.CallOption) (*TopLevelStatistics, error) {
	out := new(TopLevelStatistics)
	err := c.cc.Invoke(ctx, EnsemblMetadata_GetTopLevelStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ensemblMetadataClient) GetGenomeByName(ctx context.Context, in *GenomeNameRequest, opts ...grpc.CallOption) (*Genome, error) {
	out := new(Genome)
	err := c.cc.Invoke(ctx, EnsemblMetadata_GetGenomeByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ensemblMetadataClient) GetRelease(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (EnsemblMetadata_GetReleaseClient, error) {
	stream, err := c.cc.NewStream(ctx, &EnsemblMetadata_ServiceDesc.Streams[2], EnsemblMetadata_GetRelease_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &ensemblMetadataGetReleaseClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EnsemblMetadata_GetReleaseClient interface {
	Recv() (*Release, error)
	grpc.ClientStream
}

type ensemblMetadataGetReleaseClient struct {
	grpc.ClientStream
}

func (x *ensemblMetadataGetReleaseClient) Recv() (*Release, error) {
	m := new(Release)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ensemblMetadataClient) GetReleaseByUUID(ctx context.Context, in *GenomeUUIDRequest, opts ...grpc.CallOption) (EnsemblMetadata_GetReleaseByUUIDClient, error) {
	stream, err := c.cc.NewStream(ctx, &EnsemblMetadata_ServiceDesc.Streams[3], EnsemblMetadata_GetReleaseByUUID_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &ensemblMetadataGetReleaseByUUIDClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EnsemblMetadata_GetReleaseByUUIDClient interface {
	Recv() (*Release, error)
	grpc.ClientStream
}

type ensemblMetadataGetReleaseByUUIDClient struct {
	grpc.ClientStream
}

func (x *ensemblMetadataGetReleaseByUUIDClient) Recv() (*Release, error) {
	m := new(Release)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ensemblMetadataClient) GetGenomeSequence(ctx context.Context, in *GenomeSequenceRequest, opts ...grpc.CallOption) (EnsemblMetadata_GetGenomeSequenceClient, error) {
	stream, err := c.cc.NewStream(ctx, &EnsemblMetadata_ServiceDesc.Streams[4], EnsemblMetadata_GetGenomeSequence_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &ensemblMetadataGetGenomeSequenceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EnsemblMetadata_GetGenomeSequenceClient interface {
	Recv() (*GenomeSequence, error)
	grpc.ClientStream
}

type ensemblMetadataGetGenomeSequenceClient struct {
	grpc.ClientStream
}

func (x *ensemblMetadataGetGenomeSequenceClient) Recv() (*GenomeSequence, error) {
	m := new(GenomeSequence)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ensemblMetadataClient) GetDatasetsListByUUID(ctx context.Context, in *DatasetsRequest, opts ...grpc.CallOption) (*Datasets, error) {
	out := new(Datasets)
	err := c.cc.Invoke(ctx, EnsemblMetadata_GetDatasetsListByUUID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ensemblMetadataClient) GetDatasetInformation(ctx context.Context, in *GenomeDatatypeRequest, opts ...grpc.CallOption) (*DatasetInfos, error) {
	out := new(DatasetInfos)
	err := c.cc.Invoke(ctx, EnsemblMetadata_GetDatasetInformation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnsemblMetadataServer is the server API for EnsemblMetadata service.
// All implementations must embed UnimplementedEnsemblMetadataServer
// for forward compatibility
type EnsemblMetadataServer interface {
	// Retrieve genome by its UUID.
	GetGenomeByUUID(context.Context, *GenomeUUIDRequest) (*Genome, error)
	// Retrieve genomes by keyword search
	GetGenomesByKeyword(*GenomeByKeywordRequest, EnsemblMetadata_GetGenomesByKeywordServer) error
	// Retrieve all genomes for a give assembly accession ID
	GetGenomesByAssemblyAccessionID(*AssemblyAccessionIDRequest, EnsemblMetadata_GetGenomesByAssemblyAccessionIDServer) error
	// Get species information for a genome UUID
	GetSpeciesInformation(context.Context, *GenomeUUIDRequest) (*Species, error)
	// Get assembly information
	GetAssemblyInformation(context.Context, *AssemblyIDRequest) (*AssemblyInfo, error)
	// Get subspecies information
	GetSubSpeciesInformation(context.Context, *OrganismIDRequest) (*SubSpecies, error)
	// Get grouping information
	GetGroupingInformation(context.Context, *OrganismIDRequest) (*Grouping, error)
	// Get karyotype information
	GetKaryotypeInformation(context.Context, *GenomeUUIDRequest) (*Karyotype, error)
	// Get top level statistics
	GetTopLevelStatistics(context.Context, *OrganismIDRequest) (*TopLevelStatistics, error)
	// Retrieve genome by Ensembl name and site, and optionally release.
	GetGenomeByName(context.Context, *GenomeNameRequest) (*Genome, error)
	// Retrieve release details.
	GetRelease(*ReleaseRequest, EnsemblMetadata_GetReleaseServer) error
	// Retrieve release details for a genome.
	GetReleaseByUUID(*GenomeUUIDRequest, EnsemblMetadata_GetReleaseByUUIDServer) error
	// Retrieve sequence metadata for a genome's assembly.
	GetGenomeSequence(*GenomeSequenceRequest, EnsemblMetadata_GetGenomeSequenceServer) error
	// Retrieve a list of dataset_ids associated with a genome UUID.
	GetDatasetsListByUUID(context.Context, *DatasetsRequest) (*Datasets, error)
	// Retrieve dataset info by genome uuid and dataset_type
	GetDatasetInformation(context.Context, *GenomeDatatypeRequest) (*DatasetInfos, error)
	mustEmbedUnimplementedEnsemblMetadataServer()
}

// UnimplementedEnsemblMetadataServer must be embedded to have forward compatible implementations.
type UnimplementedEnsemblMetadataServer struct {
}

func (UnimplementedEnsemblMetadataServer) GetGenomeByUUID(context.Context, *GenomeUUIDRequest) (*Genome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGenomeByUUID not implemented")
}
func (UnimplementedEnsemblMetadataServer) GetGenomesByKeyword(*GenomeByKeywordRequest, EnsemblMetadata_GetGenomesByKeywordServer) error {
	return status.Errorf(codes.Unimplemented, "method GetGenomesByKeyword not implemented")
}
func (UnimplementedEnsemblMetadataServer) GetGenomesByAssemblyAccessionID(*AssemblyAccessionIDRequest, EnsemblMetadata_GetGenomesByAssemblyAccessionIDServer) error {
	return status.Errorf(codes.Unimplemented, "method GetGenomesByAssemblyAccessionID not implemented")
}
func (UnimplementedEnsemblMetadataServer) GetSpeciesInformation(context.Context, *GenomeUUIDRequest) (*Species, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpeciesInformation not implemented")
}
func (UnimplementedEnsemblMetadataServer) GetAssemblyInformation(context.Context, *AssemblyIDRequest) (*AssemblyInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssemblyInformation not implemented")
}
func (UnimplementedEnsemblMetadataServer) GetSubSpeciesInformation(context.Context, *OrganismIDRequest) (*SubSpecies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubSpeciesInformation not implemented")
}
func (UnimplementedEnsemblMetadataServer) GetGroupingInformation(context.Context, *OrganismIDRequest) (*Grouping, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupingInformation not implemented")
}
func (UnimplementedEnsemblMetadataServer) GetKaryotypeInformation(context.Context, *GenomeUUIDRequest) (*Karyotype, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKaryotypeInformation not implemented")
}
func (UnimplementedEnsemblMetadataServer) GetTopLevelStatistics(context.Context, *OrganismIDRequest) (*TopLevelStatistics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopLevelStatistics not implemented")
}
func (UnimplementedEnsemblMetadataServer) GetGenomeByName(context.Context, *GenomeNameRequest) (*Genome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGenomeByName not implemented")
}
func (UnimplementedEnsemblMetadataServer) GetRelease(*ReleaseRequest, EnsemblMetadata_GetReleaseServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRelease not implemented")
}
func (UnimplementedEnsemblMetadataServer) GetReleaseByUUID(*GenomeUUIDRequest, EnsemblMetadata_GetReleaseByUUIDServer) error {
	return status.Errorf(codes.Unimplemented, "method GetReleaseByUUID not implemented")
}
func (UnimplementedEnsemblMetadataServer) GetGenomeSequence(*GenomeSequenceRequest, EnsemblMetadata_GetGenomeSequenceServer) error {
	return status.Errorf(codes.Unimplemented, "method GetGenomeSequence not implemented")
}
func (UnimplementedEnsemblMetadataServer) GetDatasetsListByUUID(context.Context, *DatasetsRequest) (*Datasets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatasetsListByUUID not implemented")
}
func (UnimplementedEnsemblMetadataServer) GetDatasetInformation(context.Context, *GenomeDatatypeRequest) (*DatasetInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatasetInformation not implemented")
}
func (UnimplementedEnsemblMetadataServer) mustEmbedUnimplementedEnsemblMetadataServer() {}

// UnsafeEnsemblMetadataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnsemblMetadataServer will
// result in compilation errors.
type UnsafeEnsemblMetadataServer interface {
	mustEmbedUnimplementedEnsemblMetadataServer()
}

func RegisterEnsemblMetadataServer(s grpc.ServiceRegistrar, srv EnsemblMetadataServer) {
	s.RegisterService(&EnsemblMetadata_ServiceDesc, srv)
}

func _EnsemblMetadata_GetGenomeByUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenomeUUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnsemblMetadataServer).GetGenomeByUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnsemblMetadata_GetGenomeByUUID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnsemblMetadataServer).GetGenomeByUUID(ctx, req.(*GenomeUUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnsemblMetadata_GetGenomesByKeyword_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GenomeByKeywordRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnsemblMetadataServer).GetGenomesByKeyword(m, &ensemblMetadataGetGenomesByKeywordServer{stream})
}

type EnsemblMetadata_GetGenomesByKeywordServer interface {
	Send(*Genome) error
	grpc.ServerStream
}

type ensemblMetadataGetGenomesByKeywordServer struct {
	grpc.ServerStream
}

func (x *ensemblMetadataGetGenomesByKeywordServer) Send(m *Genome) error {
	return x.ServerStream.SendMsg(m)
}

func _EnsemblMetadata_GetGenomesByAssemblyAccessionID_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AssemblyAccessionIDRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnsemblMetadataServer).GetGenomesByAssemblyAccessionID(m, &ensemblMetadataGetGenomesByAssemblyAccessionIDServer{stream})
}

type EnsemblMetadata_GetGenomesByAssemblyAccessionIDServer interface {
	Send(*Genome) error
	grpc.ServerStream
}

type ensemblMetadataGetGenomesByAssemblyAccessionIDServer struct {
	grpc.ServerStream
}

func (x *ensemblMetadataGetGenomesByAssemblyAccessionIDServer) Send(m *Genome) error {
	return x.ServerStream.SendMsg(m)
}

func _EnsemblMetadata_GetSpeciesInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenomeUUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnsemblMetadataServer).GetSpeciesInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnsemblMetadata_GetSpeciesInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnsemblMetadataServer).GetSpeciesInformation(ctx, req.(*GenomeUUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnsemblMetadata_GetAssemblyInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssemblyIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnsemblMetadataServer).GetAssemblyInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnsemblMetadata_GetAssemblyInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnsemblMetadataServer).GetAssemblyInformation(ctx, req.(*AssemblyIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnsemblMetadata_GetSubSpeciesInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganismIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnsemblMetadataServer).GetSubSpeciesInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnsemblMetadata_GetSubSpeciesInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnsemblMetadataServer).GetSubSpeciesInformation(ctx, req.(*OrganismIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnsemblMetadata_GetGroupingInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganismIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnsemblMetadataServer).GetGroupingInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnsemblMetadata_GetGroupingInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnsemblMetadataServer).GetGroupingInformation(ctx, req.(*OrganismIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnsemblMetadata_GetKaryotypeInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenomeUUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnsemblMetadataServer).GetKaryotypeInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnsemblMetadata_GetKaryotypeInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnsemblMetadataServer).GetKaryotypeInformation(ctx, req.(*GenomeUUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnsemblMetadata_GetTopLevelStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganismIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnsemblMetadataServer).GetTopLevelStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnsemblMetadata_GetTopLevelStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnsemblMetadataServer).GetTopLevelStatistics(ctx, req.(*OrganismIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnsemblMetadata_GetGenomeByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenomeNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnsemblMetadataServer).GetGenomeByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnsemblMetadata_GetGenomeByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnsemblMetadataServer).GetGenomeByName(ctx, req.(*GenomeNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnsemblMetadata_GetRelease_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReleaseRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnsemblMetadataServer).GetRelease(m, &ensemblMetadataGetReleaseServer{stream})
}

type EnsemblMetadata_GetReleaseServer interface {
	Send(*Release) error
	grpc.ServerStream
}

type ensemblMetadataGetReleaseServer struct {
	grpc.ServerStream
}

func (x *ensemblMetadataGetReleaseServer) Send(m *Release) error {
	return x.ServerStream.SendMsg(m)
}

func _EnsemblMetadata_GetReleaseByUUID_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GenomeUUIDRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnsemblMetadataServer).GetReleaseByUUID(m, &ensemblMetadataGetReleaseByUUIDServer{stream})
}

type EnsemblMetadata_GetReleaseByUUIDServer interface {
	Send(*Release) error
	grpc.ServerStream
}

type ensemblMetadataGetReleaseByUUIDServer struct {
	grpc.ServerStream
}

func (x *ensemblMetadataGetReleaseByUUIDServer) Send(m *Release) error {
	return x.ServerStream.SendMsg(m)
}

func _EnsemblMetadata_GetGenomeSequence_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GenomeSequenceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnsemblMetadataServer).GetGenomeSequence(m, &ensemblMetadataGetGenomeSequenceServer{stream})
}

type EnsemblMetadata_GetGenomeSequenceServer interface {
	Send(*GenomeSequence) error
	grpc.ServerStream
}

type ensemblMetadataGetGenomeSequenceServer struct {
	grpc.ServerStream
}

func (x *ensemblMetadataGetGenomeSequenceServer) Send(m *GenomeSequence) error {
	return x.ServerStream.SendMsg(m)
}

func _EnsemblMetadata_GetDatasetsListByUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatasetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnsemblMetadataServer).GetDatasetsListByUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnsemblMetadata_GetDatasetsListByUUID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnsemblMetadataServer).GetDatasetsListByUUID(ctx, req.(*DatasetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnsemblMetadata_GetDatasetInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenomeDatatypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnsemblMetadataServer).GetDatasetInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnsemblMetadata_GetDatasetInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnsemblMetadataServer).GetDatasetInformation(ctx, req.(*GenomeDatatypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnsemblMetadata_ServiceDesc is the grpc.ServiceDesc for EnsemblMetadata service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnsemblMetadata_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ensembl_metadata.EnsemblMetadata",
	HandlerType: (*EnsemblMetadataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGenomeByUUID",
			Handler:    _EnsemblMetadata_GetGenomeByUUID_Handler,
		},
		{
			MethodName: "GetSpeciesInformation",
			Handler:    _EnsemblMetadata_GetSpeciesInformation_Handler,
		},
		{
			MethodName: "GetAssemblyInformation",
			Handler:    _EnsemblMetadata_GetAssemblyInformation_Handler,
		},
		{
			MethodName: "GetSubSpeciesInformation",
			Handler:    _EnsemblMetadata_GetSubSpeciesInformation_Handler,
		},
		{
			MethodName: "GetGroupingInformation",
			Handler:    _EnsemblMetadata_GetGroupingInformation_Handler,
		},
		{
			MethodName: "GetKaryotypeInformation",
			Handler:    _EnsemblMetadata_GetKaryotypeInformation_Handler,
		},
		{
			MethodName: "GetTopLevelStatistics",
			Handler:    _EnsemblMetadata_GetTopLevelStatistics_Handler,
		},
		{
			MethodName: "GetGenomeByName",
			Handler:    _EnsemblMetadata_GetGenomeByName_Handler,
		},
		{
			MethodName: "GetDatasetsListByUUID",
			Handler:    _EnsemblMetadata_GetDatasetsListByUUID_Handler,
		},
		{
			MethodName: "GetDatasetInformation",
			Handler:    _EnsemblMetadata_GetDatasetInformation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetGenomesByKeyword",
			Handler:       _EnsemblMetadata_GetGenomesByKeyword_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetGenomesByAssemblyAccessionID",
			Handler:       _EnsemblMetadata_GetGenomesByAssemblyAccessionID_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetRelease",
			Handler:       _EnsemblMetadata_GetRelease_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetReleaseByUUID",
			Handler:       _EnsemblMetadata_GetReleaseByUUID_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetGenomeSequence",
			Handler:       _EnsemblMetadata_GetGenomeSequence_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ensembl_metadata.proto",
}
